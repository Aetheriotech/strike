func_mapping = {
    "console.output": "print",
    "console.input": "input",
    "take": "import",
    "part": "from",
    "forloop": "for",
    "whileloop": "while",
    "range": "range",
    ">;": """:
    """,
    ",0<>:": """
""",
    ",1<>:": """
 """,
     ",2<>:": """
  """,
    ",3<>:": """
   """,
    ",4<>:": """
    """,
    ",<0>:": "",
    ",<1>:": " ",
    ",<2>:": "  ",
    ",<3>:": "   ",
    ",<4>:": "    ",
    ",<8>:": "        ",
    ",<12>:": "            ",
    ",<16>:": "                ",
    ",<20>:": "                    ",
    ",<24>:": "                        ",
    ",<28>:": "                            ",
    ",<32>:": "                                ",
    ",<36>:": "                                    ",
    ",<40>:": "                                        ",
    ",<44>:": "                                            ",
    ",<48>:": "                                                ",
    ",<52>:": "                                                    ",
    ",<56>:": "                                                        ",
    ",<60>:": "                                                            ",
    ",<64>:": "                                                                ",
    "block": "class",
    "logic if": "if",
    "logic elif": "elif",
    "logic else": "else",
    'count2': 'len',
    "like": "as",
    "yes": "True",
    "no": "False",
    "lastly": "finally",
    "maximum": "max",
    "minimum": "min",
    "round": "round",
    "sort": "sorted",
    "typeOf": "type",
    "AssertionFailedError": "AssertionError",
    "InvalidAttributeError": "AttributeError",
    "EndOfFileError": "EOFError",
    "FloatingPointOperationError": "FloatingPointError",
    "GeneratorClosedError": "GeneratorExit",
    "ModuleNotFoundError": "ImportError",
    "IndexOutOfBoundsError": "IndexError",
    "KeyNotFoundError": "KeyError",
    "InterruptedError": "KeyboardInterrupt",
    "OutOfMemoryError": "MemoryError",
    "InvalidNameError": "NameError",
    "MethodNotImplementedError": "NotImplementedError",
    "SystemCallError": "OSError",
    "ArithmeticOverflowError": "OverflowError",
    "MaximumRecursionDepthError": "RecursionError",
    "WeakReferenceError": "ReferenceError",
    "ExecutionError": "RuntimeError",
    "AsyncIteratorStopError": "StopAsyncIteration",
    "IteratorStopError": "StopIteration",
    "SyntaxParsingError": "SyntaxError",
    "IndentationParsingError": "IndentationError",
    "TabParsingError": "TabError",
    "InternalError": "SystemError",
    "SystemExitError": "SystemExit",
    "InvalidTypeError": "TypeError",
    "UnassignedLocalError": "UnboundLocalError",
    "UnicodeOperationError": "UnicodeError",
    "UnicodeEncodingError": "UnicodeEncodeError",
    "UnicodeDecodingError": "UnicodeDecodeError",
    "UnicodeTranslationError": "UnicodeTranslateError",
    "InvalidValueError": "ValueError",
    "DivisionByZeroError": "ZeroDivisionError",
    "BytesMixingWarning": "BytesWarning",
    "DeprecatedFeatureWarning": "DeprecationWarning",
    "FutureRemovalWarning": "FutureWarning",
    "ModuleImportWarning": "ImportWarning",
    "PendingDeprecatedFeatureWarning": "PendingDeprecationWarning",
    "ResourceLeakWarning": "ResourceWarning",
    "RuntimeWarning": "RuntimeWarning",
    "SyntaxParsingWarning": "SyntaxWarning",
    "UnicodeOperationWarning": "UnicodeWarning",
    "UserDefinedWarning": "UserWarning",
    'defined': 'def',
    "absolute": "abs",
    "every": "all",
    "some": "any",
    "binary": "bin",
    "boolean": "bool",
    "stop": "break",
    "byte_array": "bytearray",
    "byte_sequence": "bytes",
    "is_callable": "callable",
    "character": "chr",
    "class_method": "classmethod",
    "compile_code": "compile",
    "complex_number": "complex",
    "next": "continue",
    "delete": "del",
    "dictionary": "dict",
    "divide_and_remainder": "divmod",
    "index_with_enumeration": "enumerate",
    "evaluate": "eval",
    "exception": "except",
    "execute": "exec",
    "not_true": "False",
    "floating_point": "float",
    "formatted_string": "format",
    "immutable_set": "frozenset",
    "get_attribute": "getattr",
    "global_namespace": "globals",
    "has_attribute": "hasattr",
    "hashed": "hash",
    "assistance": "help",
    "within": "in",
    "integer": "int",
    "is_instance": "isinstance",
    "is_subclass": "issubclass",
    "iterate": "iter",
    "anonymous_function": "lambda",
    "array": "list",
    "local_namespace": "locals",
    "apply_to_all": "map",
    "get_next": "next",
    "nothing": "None",
    "not_local": "nonlocal",
    "opposite_of": "not",
    "instance": "object",
    "octal": "oct",
    "open_file": "open",
    "either": "or",
    "ordinal": "ord",
    "do_nothing": "pass",
    "power": "pow",
    "attribute_property": "property",
    "throw": "raise",
    "sequence_of_numbers": "range",
    "representation": "repr",
    "give_back": "return",
    "backward_sequence": "reversed",
    "rounded": "round",
    "mutable_set": "set",
    "set_attribute": "setattr",
    "slicing": "slice",
    "sorted_sequence": "sorted",
    "static_method": "staticmethod",
    "string": "str",
    "sum_of": "sum",
    "parent_class": "super",
    "really_true": "True",
    "attempt": "try",
    "immutable_array": "tuple",
    "object_type": "type",
    "object_variables": "vars",
    "loop_while": "while",
    "context_manager": "with",
    "produce_output": "yield",
    "pairwise_combine": "zip",
    'active random': 'import random',
    'random.str':'''random_string = ''.join(chr(random.randint(frandint,srandint)) for _ in range(length))
    return random_string''',
    'random_str_value1':'length',
    'random_str_value2':'frandint',
    'random_str_value3':'srandint',
    'random.int': '''random_int = random.randrange(random_range)
    return random_int''',
    'random_int_value1': 'random_range',
    'random.list': '''random_string = random.choice(random_list)
    return random_string''',
    'random_list_value1': 'random_list',
    'random.float': '''random_float = random.uniform(start, end)
    return random_float''',
    'random_float_value1': 'start',
    'random_float_value2': 'end',
    'random.dist': '''random_keys = random.sample(keys, len(keys))
    random_values = random.sample(values, len(values))
    random_dictionary = dict(zip(random_keys, random_values))
    return random_dictionary''',
    'random.V': '''
    random_dictionary = {}
    for key in keys:
        random_dictionary[key] = random.choice(values)
    return random_dictionary''',
    'random_V_value1': 'keys',
    'random_V_value2': 'values',
    'random.K': '''random.shuffle(keys)  # Shuffle the keys list randomly
    random_dictionary = {key: value for key, value in zip(keys, values)}
    return random_dictionary''',
    'random_K_value1': 'keys',
    'random_K_value2': 'values',
    'random_dist_value1': 'keys',
    'random_dist_value2': 'values',
    'random.b': '''
     b_string = ''.join(random.choice(['0', '1']) for _ in range(b_length))
     return b_string''',
    'random_b_value1': 'b_length',
    'random.TF': '''
     TF_string = ''.join(random.choice(['True', 'False']) for _ in range(TF_length))
     return TF_string''',
    'random_TF_value1': 'TF_length',
    'random.nm': '''
     nm_string = ''.join(random.choice(['True', '']) for _ in/ range(nm_length))
     return nm_string''',
    'random_nm_value1': 'nm_length',
    "~1": ",.",
    ",.": "",
}